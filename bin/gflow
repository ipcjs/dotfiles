#!/bin/bash
TYPE_ARRAY=(pr hotfix feature chore docs style build ci refactor perf test)
REMOTE=origin

if test -z "$SKIP_USE_EXE" && command -v git.exe &>/dev/null && [[ "$(pwd)" == /mnt/* ]]; then
    echo 'use git.exe'
    # shellcheck disable=SC2032
    git() {
        git.exe "$@"
    }
    export -f git
fi

print_help() {
    bin_name=$(basename "$0")
    echo "GitHub风格的开发流程, 创建/切换/更新开发分支"
    echo
    echo "Usage: $bin_name <branch_name>"
    echo
    echo "## 配置"
    echo
    echo "开启切换子模块功能:"
    echo "export GFLOW_SWITCH_SUBMODULE=Y"
    echo
    echo "## 实例"
    echo
    echo "清理本地分支:"
    echo "$bin_name clean"
    echo
    echo "创建/切换到hotfix/bug1分支:"
    echo "$bin_name hotfix/bug1"
    echo
    echo "切换到主分支, 并自动储藏未提交的代码"
    echo "$bin_name -s main"
    echo
    echo "切换到主分支, 并且不自动储藏"
    echo "$bin_name --no-auto-stash main"
    echo
    echo "版本:"
    git --version
    git submodule foreach --recursive git --version
}

get_stash_message() {
    local branch
    local commit_id
    branch=$(git rev-parse --abbrev-ref HEAD)
    commit_id=$(git rev-parse HEAD)
    echo "Automatic stash by gflow from ${commit_id} (${branch})"
}

fn_checkout() {
    local branch_name=$1
    local is_checkout
    git fetch --prune
    set -e

    if [ -n "$auto_stash" ]; then
        if ! git diff --quiet HEAD --; then
            echo "检测到未提交的代码, 储藏中..."
            git stash push -u -m "$(get_stash_message)"
        fi
    fi

    if git checkout "$branch_name" 2>/dev/null; then
        git pull --rebase
        git submodule update --recursive --init
        is_checkout='Y'
    else
        git checkout -b "$branch_name" --no-track "$default_remote_branch"
        git push $REMOTE "$branch_name:$branch_name" -u
    fi
    if [ -n "${GFLOW_SWITCH_SUBMODULE}" ]; then
        # Force creating a branch with the same name in a submodule
        git submodule foreach --recursive bash -c "git checkout -B $branch_name && git rev-parse @{u} &>/dev/null || git branch -u $REMOTE/$branch_name &>/dev/null || echo 当前子模块未追踪到远端"
    fi

    if [ -n "$auto_stash" ] && [ -n "$is_checkout" ]; then
        current_stash="$(git stash list | grep "$(get_stash_message)" | head -n1)"
        if [ -n "$current_stash" ]; then
            echo "应用自动储藏: $current_stash..."
            git stash pop "$(echo "$current_stash" | cut -d ':' -f1)"
        fi
    fi
    set +e
}

fn_clean() {
    # fn_checkout "$main_branch"

    ## Delete merged branch
    git branch --merged | grep -v '\*' | xargs git branch -d
    # git branch --merged | grep -v -E "\*|$main_branch" | xargs git branch -d
    if [ -n "${GFLOW_SWITCH_SUBMODULE}" ]; then
        git submodule foreach --recursive "git branch --merged | grep -v '\*' | xargs git branch -d"
    fi

    ## Remove tracking branches no longer on remote
    # https://stackoverflow.com/questions/7726949/remove-tracking-branches-no-longer-on-remote/33548037#33548037
    git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do git branch -D "$branch"; done

    ## Delete squashed branch
    # https://stackoverflow.com/questions/43489303/how-can-i-delete-all-git-branches-which-have-been-squash-and-merge-via-github
    # disable_shellcheck disable=SC2162,SC2046,SC1083,SC1001,SC2086
    # git checkout -q "$main_branch" && git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base "$main_branch" "$branch") && [[ $(git cherry "$main_branch" $(git commit-tree $(git rev-parse $branch\^{tree}) -p $mergeBase -m _)) == "-"* ]] && git branch -D "$branch"; done
}

default_remote_branch=$(git rev-parse --abbrev-ref "$REMOTE/HEAD") || exit 1
if ! [[ "${default_remote_branch}" =~ ^"$REMOTE"/(main|master)$ ]]; then
    echo "远端默认分支不为main/master, 更新中..."
    git remote set-head $REMOTE -a
    default_remote_branch=$(git rev-parse --abbrev-ref "$REMOTE/HEAD")
fi
main_branch=${default_remote_branch#*/}

auto_stash=''
while test $# -gt 0; do
    case "$1" in
        clean)
            fn_clean
            ;;
        -s | --auto-stash)
            auto_stash='Y'
            ;;
        --no-auto-stash)
            auto_stash=''
            ;;
        "$main_branch" | main)
            fn_checkout "$main_branch"
            ;;
        feat/*)
            fn_checkout "feature/${1#*/}"
            ;;
        fix/*)
            fn_checkout "hotfix/${1#*/}"
            ;;
        */*)
            branch_prefix="${1%%/*}"
            # shellcheck disable=SC2076
            if [[ " ${TYPE_ARRAY[*]} " =~ " $branch_prefix " ]]; then
                fn_checkout "$1"
            else
                echo "分支前缀必须是如下名字之一: ${TYPE_ARRAY[*]}"
            fi
            ;;
        '' | -h | --help)
            print_help
            ;;
        *)
            fn_checkout "${TYPE_ARRAY[0]}/$1"
            ;;
    esac
    shift
done
