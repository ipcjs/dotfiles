#!/bin/bash

# use `SKIP_USE_EXE=Y zsh` to skip use_exe.
if [ -n "$SKIP_USE_EXE" ]; then
  echo "skip use_exe."
  return
fi
export PATH="$DOTFILES_REPO_DIR/wsl-shims:$PATH"

__beginswith() { case $2 in "$1"*) true ;; *) false ;; esac }
__endswith() { case $2 in *"$1") true ;; *) false ;; esac }

__exe_or_bin_by_pwd() {
  _exe=$1
  _bin=$2
  shift 2
  if __beginswith /mnt/ "$(pwd)"; then
    if __endswith .exe "$_exe"; then
      "$_exe" "$@"
    else
      cmd.exe /c "$_exe" "$@"
    fi
  else
    "$_bin" "$@"
  fi
}

# alias git=git.exe
alias adb=adb.exe
alias ipconfig=ipconfig.exe
alias flutter='cmd.exe /c flutter'
alias dart='cmd.exe /c dart'
# alias studio='/mnt/c/SDK/android-sudio-beta/bin/studio64.exe'
alias studio='cmd.exe /c studio'
alias idea='cmd.exe /c idea'
alias wsl='wsl.exe'
alias winget='winget.exe'
alias @='cmd.exe /c'

code() {
  if __beginswith /mnt/ "$(realpath "$1")"; then
    cmd.exe /c code "$(wslpath -wa "$1")"
  else
    code_sh=$(bash -c 'type -p code')
    "$code_sh" "$@"
  fi
}

# like open of macOS
open() {
  cmd.exe /c start "$@"
}

git() { __exe_or_bin_by_pwd 'git.exe' '/usr/bin/git' "$@"; }
npm() { __exe_or_bin_by_pwd 'npm' '/usr/bin/npm' "$@"; }
npx() { __exe_or_bin_by_pwd 'npx' '/usr/bin/npx' "$@"; }
pnpm() { __exe_or_bin_by_pwd 'pnpm' '/usr/bin/pnpm' "$@"; }
node() { __exe_or_bin_by_pwd 'node.exe' '/usr/bin/node' "$@"; }
nvm() { __exe_or_bin_by_pwd 'nvm.exe' '/usr/bin/nvm' "$@"; }
mono_repo() { __exe_or_bin_by_pwd 'mono_repo' 'mono_repo' "$@"; }

__git_prompt_git() {
  GIT_OPTIONAL_LOCKS=0 git "$@"
}

# fallback to xxx.exe if xxx is not found.
# https://github.com/microsoft/WSL/issues/2003
eval "$(
  echo "orig_command_not_found_handler(){"
  declare -f command_not_found_handler | tail -n +2
)"
command_not_found_handler() {
  # echo ">>$*"
  local cmd=$1
  local cmd_args=("$@")
  shift
  local args=("$@")

  # process exe
  if which "$cmd.exe" >/dev/null; then
    "$cmd.exe" "${args[@]}"
    return $?
  # process cmd
  elif which "$cmd.cmd" >/dev/null; then
    cmd.exe /c "$cmd.cmd" "${args[@]}"
    return $?
  # process bat/command in cmd, eg: start, mklink
  # please replace 帮助工具不支持此命令 to your language.
  elif cmd.exe /c "(where $cmd || (help $cmd | findstr /V 帮助工具不支持此命令)) >nul 2>nul"; then
    cmd.exe /c "${cmd_args[*]}"
    return $?
  fi

  orig_command_not_found_handler "$cmd" "${args[@]}"
  return $?
}
