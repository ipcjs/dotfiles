#!/bin/bash
TYPE_ARRAY=(pr hotfix feature chore docs style build ci refactor perf test)
REMOTE=origin

if test -z "$SKIP_USE_EXE" && command -v git.exe &>/dev/null && [[ "$(pwd)" == /mnt/* ]]; then
    echo 'use git.exe'
    # shellcheck disable=SC2032
    git() {
        git.exe "$@"
    }
    export -f git
fi

print_help() {
    bin_name=$(basename "$0")
    echo "GitHub风格的开发流程, 创建/切换/更新开发分支"
    echo
    echo "Usage: $bin_name <branch_name>"
    echo
    echo "## 实例"
    echo
    echo "清理本地分支:"
    echo "$bin_name clean"
    echo
    echo "创建/切换到hotfix/bug1分支:"
    echo "$bin_name hotfix/bug1"
    echo
    echo "版本:"
    git --version
    git submodule foreach --recursive git --version
}

fn_checkout() {
    local branch_name=$1
    git fetch --prune
    set -e
    if git checkout "$branch_name" 2>/dev/null; then
        git pull --rebase
        git submodule update --recursive --init
    else
        git checkout -b "$branch_name" --no-track "$default_remote_branch"
        git push $REMOTE "$branch_name:$branch_name" -u
    fi
    # Force creating a branch with the same name in a submodule
    git submodule foreach --recursive "git switch -C $branch_name && git rev-parse @{u} &>/dev/null || git branch -u $REMOTE/$branch_name &>/dev/null || echo 当前子模块未追踪到远端"
    set +e
}

fn_clean() {
    fn_checkout "$main_branch"
    ## delete merged branch
    git branch --merged | grep -v '\*' | xargs git branch -d
    # git branch --merged | grep -v -E "\*|$main_branch" | xargs git branch -d
    git submodule foreach --recursive "git branch --merged | grep -v '\*' | xargs git branch -d"

    ## delete squashed branch
    # https://stackoverflow.com/questions/43489303/how-can-i-delete-all-git-branches-which-have-been-squash-and-merge-via-github
    # shellcheck disable=SC2162,SC2046,SC1083,SC1001,SC2086
    git checkout -q "$main_branch" && git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do mergeBase=$(git merge-base "$main_branch" "$branch") && [[ $(git cherry "$main_branch" $(git commit-tree $(git rev-parse $branch\^{tree}) -p $mergeBase -m _)) == "-"* ]] && git branch -D "$branch"; done
}

default_remote_branch=$(git rev-parse --abbrev-ref "$REMOTE/HEAD") || exit 1
if ! [[ "${default_remote_branch}" =~ ^"$REMOTE"/(main|master)$ ]]; then
    echo "远端默认分支不为main/master, 更新中..."
    git remote set-head $REMOTE -a
    default_remote_branch=$(git rev-parse --abbrev-ref "$REMOTE/HEAD")
fi
main_branch=${default_remote_branch#*/}

case "$1" in
    clean)
        fn_clean
        ;;
    "$main_branch")
        fn_checkout "$main_branch"
        ;;
    feat/*)
        fn_checkout "feature/${1#*/}"
        ;;
    fix/*)
        fn_checkout "hotfix/${1#*/}"
        ;;
    */*)
        branch_prefix="${1%%/*}"
        # shellcheck disable=SC2076
        if [[ " ${TYPE_ARRAY[*]} " =~ " $branch_prefix " ]]; then
            fn_checkout "$1"
        else
            echo "分支前缀必须是如下名字之一: ${TYPE_ARRAY[*]}"
        fi
        ;;
    '' | -h | --help)
        print_help
        ;;
    *)
        fn_checkout "${TYPE_ARRAY[0]}/$1"
        ;;
esac
